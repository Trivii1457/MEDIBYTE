@model RipsModel 
@{
    string Prefix = "Rips"; 

    string UrlSave = Url.Action("Edit", "Rips"); 
    string UrlNew = Url.Action("New", "Rips"); 
    string UrlDelete = Url.Action("Delete", "Rips", new { Id = Model.Entity.Id }); 
    string UrlBack = Url.Action("ListPartial", "Rips"); 

    var ToolbarConfig = new ToolbarConfiguration(Prefix) 
        .Title(DApp.DefaultLanguage.GetResource("Rips")) 
        .Save(DApp.ActionViewSecurity(Context, UrlSave),Model.Entity.IsNew) 
        .New(UrlNew, DApp.ActionViewSecurity(Context, UrlNew)) 
        .Delete(UrlDelete,DApp.ActionViewSecurity(Context,UrlDelete),UrlBack,Model.Entity.IsNew)
        .AddButtons(new List<ButtonToolbar>()
        {
            new ButtonToolbar
            {
                Action = $"{Prefix}GenerarArchivos",
                Text = @DApp.DefaultLanguage.GetResource("Rips.GenerarArchivos"),
                Disabled = Model.Entity.IsNew,
                Location = ToolbarItemLocation.After,
                LocateInMenu = ToolbarItemLocateInMenuMode.Auto,
                Icon = "export"
            }
        })
        .Back(UrlBack); 
}

<partial name="ViewJS.cshtml" model="Model" view-data="ViewData" /> 

@(Html.DControls().Toolbar(ToolbarConfig)) 

<div> 
    <div id = "RipsMainPanelForm"> 
        <form id="@(Prefix)Form" asp-controller="Rips" asp-action="Edit" class="form-horizontal" data-ajax-mode="replace" data-ajax-update="#mainPanel" data-ajax-success="@(Prefix)FormSuccess" data-ajax-failure="@(Prefix)FormFailure" data-ajax="true">
            @(Html.DControls().ValidationSummary().ValidationGroup(Prefix + "ValidationGroup").ElementAttr("class","ErrorValidationSummary"))
            @using (Html.DevExtreme().ValidationGroup(Prefix + "ValidationGroup"))
            {
                @(Html.DControls().CheckBoxFor(m => m.Entity.IsNew).ID(Prefix + "IsNew").Visible(false))
                @(Html.DControls().NumberBoxFor(m => m.Entity.Id).ID(Prefix + "Id").Visible(false))
                @(Html.DControls().TextBoxFor(m => m.Entity.UpdatedBy).ID(Prefix + "UpdatedBy").Visible(false))
                @(Html.DControls().DateBoxFor(m => m.Entity.LastUpdate).ID(Prefix + "LastUpdate").Type(DateBoxType.DateTime).Visible(false))
                @(Html.DControls().TextBoxFor(m => m.Entity.CreatedBy).ID(Prefix + "CreatedBy").Visible(false))
                @(Html.DControls().DateBoxFor(m => m.Entity.CreationDate).ID(Prefix + "CreationDate").Type(DateBoxType.DateTime).Visible(false))

                @(Html.DControls().NumberBoxFor(m => m.Entity.EmpresasId).ID(Prefix + "EmpresasId").Visible(false))

                @(Html.DControls().Form<RipsModel>()
                    .ID("RipsModelForm").LabelLocation(FormLabelLocation.Top).ShowValidationSummary(false).FormData(Model)
                    .Items(items =>
                    {
                        items.AddGroup().ColCount(12).Caption(DApp.DefaultLanguage.GetResource("DEFAULT.INFORMATIONGENERAL"))
                            .Items(groupItems =>{

                                groupItems.AddSimpleFor(m => m.Entity.Consecutivo).ColSpan(2)
                                  .ValidationRules(rules => rules.AddRequired().Message(DApp.GetRequiredResource("Rips.Consecutivo")))
                                      .Editor(e => e.NumberBox().ID(Prefix + "FechaRemision")
                                      .ReadOnly(true)
                                      );

                                groupItems.AddSimpleFor(m => m.Entity.FechaRemision).ColSpan(3)
                                  .ValidationRules(rules => rules.AddRequired().Message(DApp.GetRequiredResource("Rips.FechaRemision")))
                                      .Editor(e => e.DateBox().ID(Prefix + "FechaRemision").Type(DateBoxType.DateTime)
                                      .DisplayFormat(DApp.DefaultLanguage.DateFormat).Placeholder("yyyy-MM")
                                      .ReadOnly(true)
                                      );

                                groupItems.AddEmpty().ColSpan(7);

                                groupItems.AddSimpleFor(m => m.Entity.Periodo).ColSpan(3)
                                  .ValidationRules(rules => rules.AddRequired().Message(DApp.GetRequiredResource("Rips.Periodo")))
                                      .Editor(e => e.DateBox().ID(Prefix + "Periodo").Type(DateBoxType.Date)
                                      .DisplayFormat(Format.MonthAndYear).CalendarOptions(x=>x.MaxZoomLevel(CalendarZoomLevel.Year).MinZoomLevel(CalendarZoomLevel.Century))
                                      .ShowClearButton(true).UseMaskBehavior(true)
                                      );

                                groupItems.AddSimpleFor(m => m.Entity.EntidadesId).ColSpan(6)
                                   .ValidationRules(rules => rules.AddRequired().Message(DApp.GetRequiredResource("Rips.EntidadesId")))
                                   .ValidationRules(rules => rules.AddRange().Min(1).Message(DApp.GetRequiredResource("Rips.EntidadesId")))
                                        .Editor(e => e.SelectBox().ID(Prefix + "EntidadesId")
                                        .DataSource(d => d.Mvc().LoadMethod("POST").Controller("Rips").LoadAction("GetEntidadesId").Key("Id"))
                                        .DataSourceOptions(o => o.Paginate(true).PageSize(10))
                                        .ValueExpr("Id").DisplayExpr("Alias").SearchExpr("Alias")
                                        .SearchEnabled(true).ShowClearButton(true)
                                   );



                                groupItems.AddSimpleFor(m => m.Entity.GenararCT).Label(x=>x.Visible(false)).ColSpan(3)
                                      .Editor(e=>e.CheckBox().ID(Prefix + "GenararCT").Text(DApp.DefaultLanguage.GetResource("Rips.GenararCT")).Value(true).ReadOnly(true));
                                groupItems.AddSimpleFor(m => m.Entity.GenerarAF).Label(x=>x.Visible(false)).ColSpan(3)
                                      .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAF").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAF")));
                                groupItems.AddSimpleFor(m => m.Entity.GenerarUS).Label(x=>x.Visible(false)).ColSpan(3)
                                      .Editor(e=>e.CheckBox().ID(Prefix + "GenerarUS").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarUS")));
                                groupItems.AddSimpleFor(m => m.Entity.GenerarAC).Label(x=>x.Visible(false)).ColSpan(3)
                                      .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAC").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAC")));
                                groupItems.AddSimpleFor(m => m.Entity.GenerarAP).Label(x=>x.Visible(false)).ColSpan(3)
                                      .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAP").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAP")));
                                //groupItems.AddSimpleFor(m => m.Entity.GenerarAU).Label(x=>x.Visible(false)).ColSpan(1)
                                //     .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAU").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAU")));
                                //groupItems.AddSimpleFor(m => m.Entity.GenerarAH).Label(x=>x.Visible(false)).ColSpan(1)
                                //     .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAH").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAH")));
                                //groupItems.AddSimpleFor(m => m.Entity.GenerarAN).Label(x=>x.Visible(false)).ColSpan(1)
                                //     .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAN").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAN")));
                                //groupItems.AddSimpleFor(m => m.Entity.GenerarAM).Label(x=>x.Visible(false)).ColSpan(1)
                                //     .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAM").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAM")));
                                //groupItems.AddSimpleFor(m => m.Entity.GenerarAT).Label(x=>x.Visible(false)).ColSpan(1)
                                //     .Editor(e=>e.CheckBox().ID(Prefix + "GenerarAT").Text(DApp.DefaultLanguage.GetResource("Rips.GenerarAT")));

                                //groupItems.AddEmpty().ColSpan(9);

                                groupItems.AddSimpleFor(m => m.Entity.CreatedBy).ColSpan(3)
                                        .Editor(e => e.TextBox().ReadOnly(true));
                                groupItems.AddSimpleFor(m => m.Entity.CreationDate).ColSpan(3)
                                     .Editor(e => e.DateBox().ReadOnly(true)
                                     .Type(DateBoxType.DateTime)
                                     .DisplayFormat(DApp.DefaultLanguage.DateTimeFormat));

                                groupItems.AddSimpleFor(m => m.Entity.UpdatedBy).ColSpan(3)
                                     .Editor(e => e.TextBox().ReadOnly(true));
                                groupItems.AddSimpleFor(m => m.Entity.LastUpdate).ColSpan(3)
                                     .Editor(e => e.DateBox().ReadOnly(true)
                                     .Type(DateBoxType.DateTime)
                                     .DisplayFormat(DApp.DefaultLanguage.DateTimeFormat));

                            });
                    })
                )
            }
        </form> 

        @* Si el maestro maneja detalle descomentar el siguiente codigo y remplazar la palabra "MAESTRODETALLE" *@
        @* 
        <div> 
           <ul class="nav nav-tabs" role="tablist"> 
               <li role="presentation" class="active"> 
                   <a href="#MAESTRODETALLE" aria-controls="MAESTRODETALLE" role="tab" data-toggle="tab"> 
                       @DApp.DefaultLanguage.GetResource("MAESTRODETALLE") 
                   </a> 
               </li> 
           </ul> 
           <div class="tab-content"> 
               <div role="tabpanel" class="tab-pane active" id="MAESTRODETALLE">
                   <partial name="../MAESTRODETALLE/ListDetail.cshtml" model=Model view-data="ViewData" />
               </div>
           </div>
        </div>
        *@

    </div> 
</div> 

